/*jslint plusplus: true, vars: true, browser: true, nomen: true */
/*global window,navigator,alert,saveAs,Blob,CustomEvent,angular,FileReader,Storage*/

(function () {
    'use strict';

    //---- SIMPLE TRANSLATE

    var translate = {
        "en" : {
            support_the_app : "Support the App",
            recipe_book : "Recipes Book",
            rename : "Rename",
            import_explain : "You can import a backup (formulas, books, ...) from a previously exported file. Current data will be erased.",
            choose_backup_file : "Choose 'Backup' file",
            scale_by : "Scale by",
            total : "Total",
            flours : "Flours",
            new_flour : "New flour",
            ingredients : "Ingredients",
            new_ingredient : "New ingredient",
            overall : "Overall",
            preferment : "Preferment",
            'new' : "New",
            type : "Type",
            sourdough : "Sourdough",
            prefermented_flour : "Prefermented flour",
            sourdough_seed : "Sourdough starter",
            pickup : "Pickup",
            flour : "Flour",
            ingredient : "Ingredient",
            final_dough : "Final dough",
            dough : "Dough",
            total_amount : "Total amount",
            add_to_favorites : "Add to Favorites",
            calculate : "Calculate",
            weight : "Weight",
            app_name : "Baker % Calc",
            favorite_dough : "Favorites Dough",
            'import' : "Import",
            'export' : "Export",
            save_as : "Save as",
            save : "Save",
            reset : "Reset",
            about : "About",
            bad_value : "Bad value",
            close : "Close",
            cancel : "Cancel",
            fill_total_amount_field : "Fill <strong>Total amount</strong> field",
            enter_recipe_name : "Enter recipe name",
            rename_as : "Rename As",
            save_error : "Save error",
            element_already_pres_use_dif_name : "The name is already in use. Please use a different name!",
            sure_reset : "Are you sure you want to reset the current recipe?",
            import_confirm : "Import confirm",
            sure_overwrite : 'Are you sure you want to overwrite all data?',
            link : "Link",
            link_copied : "Link copied",
            sourdough_builder : "Sourdough Builder",
            sourdough_builder_book : "Sourdough Builder Book",
            new_build : "New build",
            water : "Water",
            imported : "Imported",
            builds : "Builds",
            ddt : "Desired Dough Temperature",
            number_of_preferments : "Number of Preferments",
            room_temperature : "Room temperature",
            flour_temperature : "Flour temperature",
            preferment_temperature : "Preferment temperature",
            water_temperature : "Water temperature",
            friction_factor : "Friction factor",
            imported_summary : function (p1, p2, p3) {
                return "<ul>" +
                    "<li>Recipes Book: " + p1 + "</li>" +
                    "<li>Favorites Dough: " + p2 + "</li>" +
                    "<li>Sourdough Builder Book: " + p3 + "</li>" +
                    "</ul>";
            },

            alert1 : function (p1) { return "Flours sum is <strong>" + p1 + "</strong>%. It should sum to <strong>100%</strong>"; },
            alert2 : function (p1) { return "Bad value for <strong>" + p1 + "</strong>"; },
            alert3 : function (p1) { return "Bad % of prefermented flour for <strong>" + p1 + "</strong>"; },
            alert4 : function (p1) { return "Prefermented flours sum is <strong>" + p1 + "</strong>%. It should sum up to <strong>100%</strong>"; },
            alert5 : function (p1, p2) { return "Not enough <strong>" + p1 + "</strong> to build preferment <strong>" + p2 + "</strong>"; }
        },
        "de" : {
            support_the_app : "Unterstützen Sie die App",
            recipe_book : "Rezeptebuch",
            rename : "Umbenennen",
            import_explain : "Sie können ein Backup aus einer zuvor exportierten Datei importieren. Aktuelle Daten werden gelöscht.",
            choose_backup_file : "Datei 'Backup' wählen",
            scale_by : "Berechnen nach",
            total : "Total",
            flours : "Mehl",
            new_flour : "Neues Mehl",
            ingredients : "Zutaten",
            new_ingredient : "Neue Zutaten",
            overall : "Formel",
            preferment : "Vorteig",
            'new' : "Neu",
            type : "Art",
            sourdough : "Sauerteig",
            prefermented_flour : "Mehl für Vorteig",
            sourdough_seed : "Anstellgut",
            pickup : "Einfügen",
            flour : "Mehl",
            ingredient : "Zutat",
            final_dough : "Endteig",
            dough : "Teig",
            total_amount : "Gesamtmenge",
            add_to_favorites : "Zu Favoriten hinzufügen",
            calculate : "Kalkulieren",
            weight : "Gewicht",
            app_name : "Baker % Calc",
            favorite_dough : "Favoriten",
            'import' : "Import",
            'export' : "Export",
            save_as : "Speichern unter",
            save : "Speichern",
            reset : "Zurücksetzen",
            about : "Über",
            bad_value : "Falscher Wert",
            close : "Schliessen",
            cancel : "Beenden",
            fill_total_amount_field : "Bitte das Feld <strong>Gesamtmenge</strong> ausfüllen",
            enter_recipe_name : "Rezeptname eingeben",
            rename_as : "Umbenennen",
            save_error : "Speicherfehler",
            element_already_pres_use_dif_name : "Der Name wird bereits verwendet. Bitte wählen Sie einen anderen Namen!",
            sure_reset : "Sind Sie sicher, dass Sie das aktuelle Rezept zurücksetzen wollen?",
            import_confirm : "Import bestätigen",
            sure_overwrite : 'Sicher, dass alle Daten überschrieben werden sollen?',
            link : "Link",
            link_copied : "Link kopiert",
            sourdough_builder : "Sauerteigstufen",
            sourdough_builder_book : "Sauerteigstufenbuch",
            new_build : "Neue Stufe",
            water : "Wasser",
            imported : "Importiert",
            builds : "Stufen",
            ddt : "Gewünschte Teigtemperatur",
            number_of_preferments : "Vorteigstufe",
            room_temperature : "Raumtemperatur",
            flour_temperature : "Mehltemperatur",
            preferment_temperature : "Vorteigtemperatur",
            water_temperature : "Zugusstemperatur",
            friction_factor : "Kneterwärmung",
            imported_summary : function (p1, p2, p3) {
                return "<ul>" +
                    "<li>Rezeptebuch: " + p1 + "</li>" +
                    "<li>Favoriten: " + p2 + "</li>" +
                    "<li>Sauerteigstufenbuch: " + p3 + "</li>" +
                    "</ul>";
            },

            alert1 : function (p1) { return "Mehlmenge beträgt <strong>" + p1 + "</strong>%. Sie muss <strong>100%</strong> betragen."; },
            alert2 : function (p1) { return "Der Wert <strong>" + p1 + "</strong> ist falsch."; },
            alert3 : function (p1) { return "<strong>" + p1 + "</strong>: Wert 'Mehl für Vorteig' ist falsch."; },
            alert4 : function (p1) { return "Die Menge der Mehle der Vorteige beträgt <strong>" + p1 + "</strong>%. Sie muss <strong>100%</strong> betragen."; },
            alert5 : function (p1, p2) { return "Nicht genug <strong>" + p1 + "</strong>, um <strong>" + p2 + "</strong>-Vorteig herzustellen."; }
        },
        "it" : {
            support_the_app : "Supporta l'App",            
            recipe_book : "Libro Ricette",
            rename : "Rinomina",
            import_explain : "Puoi importare un backup (formule, libri, ...) da un file precedentemente esportato. I dati attuali saranno cancellati.",
            choose_backup_file : "Scegli file di 'Backup'",
            scale_by : "Scale per",
            total : "Totale",
            flours : "Farine",
            new_flour : "Nuova farina",
            ingredients : "Ingredienti",
            new_ingredient : "Nuovo ingrediente",
            overall : "Formula",
            preferment : "Preimpasto",
            'new' : "Nuovo",
            type : "Tipo",
            sourdough : "Lievito Naturale",
            prefermented_flour : "Farina prefermentata",
            sourdough_seed : "Madre",
            pickup : "Seleziona",
            flour : "Farina",
            ingredient : "Ingrediente",
            final_dough : "Impasto Finale",
            dough : "Impasto",
            total_amount : "Quantità totale",
            add_to_favorites : "Aggiungi ai Preferiti",
            calculate : "Calcola",
            weight : "Peso",
            app_name : "Baker % Calc",
            favorite_dough : "Impasti Preferiti",
            'import' : "Importa",
            'export' : "Esporta",
            save_as : "Salva come",
            save : "Salva",
            reset : "Azzera",
            about : "Informazioni",
            bad_value : "Valore errato",
            close : "Chiudi",
            cancel : "Annulla",
            fill_total_amount_field : "Imposta <strong>Quantità totale</strong>",
            enter_recipe_name : "Inserisci nome ricetta",
            rename_as : "Rinomina come",
            save_error : "Errore salvataggio",
            element_already_pres_use_dif_name : "Nome già presente. Usa un nome diverso!",
            sure_reset : "Sicuro di voler azzerare la ricetta corrente?",
            import_confirm : "Conferma importa",
            sure_overwrite : 'Sicuro di voler sovrascrivere tutto i dati?',
            link : "Link",
            link_copied : "Link copiato",
            sourdough_builder : "Rinfreschi",
            sourdough_builder_book : "Libro Rinfreschi",
            new_build : "Nuovo rinfresco",
            water : "Acqua",
            imported : "Importato",
            builds : "Rinfreschi",
            ddt : "Temperature Impasto Desiderata",
            number_of_preferments : "Numero di preimpasti",
            room_temperature : "Temperatura ambiente",
            flour_temperature : "Temperatura farina",
            preferment_temperature : "Temperatura prefermento",
            water_temperature : "Temperatura acqua",
            friction_factor : "Costante frizione",
            imported_summary : function (p1, p2, p3) {
                return "<ul>" +
                    "<li>Libro Ricette: " + p1 + "</li>" +
                    "<li>Impasti Preferiti: " + p2 + "</li>" +
                    "<li>Libro Rinfreschi: " + p3 + "</li>" +
                    "</ul>";
            },

            alert1 : function (p1) { return "La somma delle farine è <strong>" + p1 + "</strong>%. La somma deve essere <strong>100%</strong>"; },
            alert2 : function (p1) { return "Valore errato per <strong>" + p1 + "</strong>"; },
            alert3 : function (p1) { return "% farina prefermentata errata per <strong>" + p1 + "</strong>"; },
            alert4 : function (p1) { return "La somma delle farine prefermentate è <strong>" + p1 + "</strong>%. La somma deve essere <strong>100%</strong>"; },
            alert5 : function (p1, p2) { return "<strong>" + p1 + "</strong> non è sufficiente per costruire il prefermento <strong>" + p2 + "</strong>"; }
        }
    };

    //---- SAVE FUNCTIONS

    function saveFile(fileName, fileData) {
        saveAs(new Blob([fileData], {type: "text/plain;charset=utf-8"}), fileName);
    }

    //---- Ingredient

    function Ingredient(name, value, weight) {
        this.name = name;
        this.value = value;     // %
        this.weight = weight;   // grams
    }

    //---- Preferment

    function Preferment(name, type, prefFlourValue, seed, flours, ingredients) {
        this.name = name;
        this.prefFlourValue = prefFlourValue;
        this.seed = seed;
        this.flours = flours;
        this.ingredients = ingredients;
        this.type = type;
    }

    //---- SourdoughBuild

    function SourdoughBuild(name, flour, water, starter) {
        this.name = name;
        this.flour = flour;
        this.water = water;
        this.starter = starter;
    }

    //---- Check browser support

    function isSupportedWebStorage() {
        if (Storage === "undefined") {
            return false;
        }
        return true;
    }

    function isSupportedFileAPIs() {
        if (window.File && window.FileReader && Blob !== "undefined") {
            return true;
        }
        return false;
    }

    //-----

    function translationApply(scope, lang) {
        lang = lang.split("-")[0];

        if (translate.hasOwnProperty(lang)) {
            scope.t = translate[lang];
        } else {
            scope.t = translate.en;
        }

        scope.recipeBook.init();

        // asynchronous call, from navigator.globalization.getPreferredLanguage() need to apply!
        scope.$apply();
    }

    //---- APP

    var app = angular.module('ionicApp', ['ionic']);

    app.controller("bcCtrl", function ($scope, $ionicPlatform, $ionicPopup, $ionicModal, $ionicScrollDelegate, $ionicTabsDelegate, $ionicListDelegate) {
        $ionicPlatform.ready(function () {
            $scope.ms = window.localStorage;

            $scope.storageSuopport = isSupportedWebStorage();
            $scope.fileAPISupport = isSupportedFileAPIs();

            if (navigator.language) {  // browser language
                translationApply($scope, navigator.language);
            } else {
                translationApply($scope, "en");  // default
            }
        });

        $scope.overall = {
            flours : [],
            ingredients : [],

            reset : function () {
                this.flours = [];
                this.ingredients = [];
            },

            delFlour : function (item) {
                var idx = this.flours.indexOf(item);
                if (idx !== -1) {
                    $scope.preferment.notifyOverallFlourRemoved(idx);
                    this.flours.splice(idx, 1);

                    $scope.recipeBook.notifyEdit();
                }
            },

            moveFlour : function (item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    this.flours.splice(fromIndex, 1);
                    this.flours.splice(toIndex, 0, item);

                    $scope.preferment.notifyOverallFlourMoved(fromIndex, toIndex);
                    $scope.recipeBook.notifyEdit();
                }
            },

            addFlourName : "",
            addFlour : function () {
                this.flours.push(new Ingredient(this.addFlourName));
                this.addFlourName = "";

                $scope.recipeBook.notifyEdit();
            },

            checkFlours : function () {
                var pFlourSum = 0;
                var idx, flour;

                for (idx = 0; idx < this.flours.length; idx++) {
                    flour = this.flours[idx];

                    if (flour.value === undefined) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            subTitle: $scope.t.overall.toUpperCase() + " % - " + $scope.t.flours.toUpperCase(),
                            template : $scope.t.alert2(flour.name),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }

                    pFlourSum += flour.value;
                }

                if (pFlourSum !== 100) {
                    $ionicPopup.alert({
                        title: $scope.t.bad_value.toUpperCase(),
                        subTitle: $scope.t.overall.toUpperCase() + " % - " + $scope.t.flours.toUpperCase(),
                        template : $scope.t.alert1(pFlourSum),
                        okText: $scope.t.close.toUpperCase()
                    });
                    return -1;
                }

                return 0;
            },

            delIngredient : function (item) {
                var idx = this.ingredients.indexOf(item);
                if (idx !== -1) {
                    $scope.preferment.notifyOverallIngredientRemoved(idx);
                    this.ingredients.splice(idx, 1);

                    $scope.recipeBook.notifyEdit();
                }
            },

            moveIngredient : function (item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    this.ingredients.splice(fromIndex, 1);
                    this.ingredients.splice(toIndex, 0, item);

                    $scope.preferment.notifyOverallIngredientMoved(fromIndex, toIndex);
                    $scope.recipeBook.notifyEdit();
                }
            },

            addIngredientName : "",
            addIngredient : function () {
                this.ingredients.push(new Ingredient(this.addIngredientName));
                this.addIngredientName = "";

                $scope.recipeBook.notifyEdit();
            },

            checkIngredients : function () {
                var idx, ingr;

                for (idx = 0; idx < this.ingredients.length; idx++) {
                    ingr = this.ingredients[idx];
                    if (ingr.value === undefined) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            subTitle: $scope.t.overall.toUpperCase() + " % - " + $scope.t.ingredients.toUpperCase(),
                            template : $scope.t.alert2(ingr.name),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }
                }

                return 0;
            },

            check : function () {
                if (this.checkFlours() !== 0 || this.checkIngredients() !== 0) {
                    return -1;
                }

                return 0;
            },

            scaleFactor : function () {
                var pFlourSum = 0;
                var allList = this.flours.concat(this.ingredients);
                var idx = 0;

                for (idx = 0; idx < allList.length; idx++) {
                    pFlourSum += allList[idx].value;
                }

                return pFlourSum;
            }
        };

        $scope.preferment = {
            preferments : [],

            delPreferment : function (item) {
                var idx = this.preferments.indexOf(item);
                if (idx !== -1) {
                    this.preferments.splice(idx, 1);

                    $scope.recipeBook.notifyEdit();
                }
            },

            addPrefermentType : "",
            addPrefermentName : "",
            addPreferment : function () {
                this.preferments.push(new Preferment(this.addPrefermentName, this.addPrefermentType, undefined, undefined, [], []));
                this.addPrefermentName = "";
                this.addPrefermentType = "";

                $scope.recipeBook.notifyEdit();
            },

            selectedFlour : undefined,
            addFlour : function (pref) {
                pref.flours.push({flourRef : $scope.overall.flours.indexOf(this.selectedFlour), value : undefined});
                this.selectedFlour = undefined;

                $scope.recipeBook.notifyEdit();
            },

            delFlour : function (pref, flour) {
                var idx = pref.flours.indexOf(flour);
                if (idx !== -1) {
                    pref.flours.splice(idx, 1);

                    $scope.recipeBook.notifyEdit();
                }
            },

            moveFlour : function (pref, item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    pref.flours.splice(fromIndex, 1);
                    pref.flours.splice(toIndex, 0, item);

                    $scope.recipeBook.notifyEdit();
                }
            },

            availableFlours : function (pref) {
                var res = $scope.overall.flours.slice();
                var idx, jdx;

                for (idx = 0; idx < pref.flours.length; idx++) {
                    jdx = res.indexOf($scope.overall.flours[pref.flours[idx].flourRef]);
                    if (jdx !== -1) {
                        res.splice(jdx, 1);
                    }
                }
                return res;
            },

            selectedIngredient : undefined,
            addIngredient : function (pref) {
                pref.ingredients.push({ingrRef : $scope.overall.ingredients.indexOf(this.selectedIngredient), value : undefined});
                this.selectedIngredient = undefined;

                $scope.recipeBook.notifyEdit();
            },

            delIngredient : function (pref, ingr) {
                var idx = pref.ingredients.indexOf(ingr);
                if (idx !== -1) {
                    pref.ingredients.splice(idx, 1);

                    $scope.recipeBook.notifyEdit();
                }
            },

            moveIngredient : function (pref, item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    pref.ingredients.splice(fromIndex, 1);
                    pref.ingredients.splice(toIndex, 0, item);

                    $scope.recipeBook.notifyEdit();
                }
            },

            notifyOverallFlourRemoved : function (idxRef) {
                var idx, jdx, pref;
                for (idx = 0; idx < this.preferments.length; idx++) {
                    pref = this.preferments[idx];
                    for (jdx = 0; jdx < pref.flours.length; jdx++) {
                        if (idxRef === pref.flours[jdx].flourRef) {
                            pref.flours.splice(jdx, 1);
                            break;
                        }
                    }
                    for (jdx = 0; jdx < pref.flours.length; jdx++) {
                        if (idxRef < pref.flours[jdx].flourRef) {
                            pref.flours[jdx].flourRef--;
                        }
                    }
                }
            },

            notifyOverallFlourMoved : function (fromIdx, toIndex) {
                var idx, jdx, pref;
                for (idx = 0; idx < this.preferments.length; idx++) {
                    pref = this.preferments[idx];
                    for (jdx = 0; jdx < pref.flours.length; jdx++) {
                        if (pref.flours[jdx].flourRef === fromIdx) {    // points to elm moved
                            pref.flours[jdx].flourRef = toIndex;
                        } else {
                            if (fromIdx < toIndex) {
                                if (fromIdx < pref.flours[jdx].flourRef  && pref.flours[jdx].flourRef <= toIndex) {
                                    pref.flours[jdx].flourRef--;
                                }
                            } else if (toIndex < fromIdx) {
                                if (toIndex <= pref.flours[jdx].flourRef  && pref.flours[jdx].flourRef < fromIdx) {
                                    pref.flours[jdx].flourRef++;
                                }
                            }
                        }
                    }
                }
            },

            notifyOverallIngredientRemoved : function (idxRef) {
                var idx, jdx, pref;
                for (idx = 0; idx < this.preferments.length; idx++) {
                    pref = this.preferments[idx];
                    for (jdx = 0; jdx < pref.ingredients.length; jdx++) {
                        if (idxRef === pref.ingredients[jdx].ingrRef) {
                            pref.ingredients.splice(jdx, 1);
                            break;
                        }
                    }
                    for (jdx = 0; jdx < pref.ingredients.length; jdx++) {
                        if (idxRef < pref.ingredients[jdx].ingrRef) {
                            pref.ingredients[jdx].ingrRef--;
                        }
                    }
                }
            },

            notifyOverallIngredientMoved : function (fromIdx, toIndex) {
                var idx, jdx, pref;
                for (idx = 0; idx < this.preferments.length; idx++) {
                    pref = this.preferments[idx];
                    for (jdx = 0; jdx < pref.ingredients.length; jdx++) {
                        if (pref.ingredients[jdx].ingrRef === fromIdx) {    // points to elm moved
                            pref.ingredients[jdx].ingrRef = toIndex;
                        } else {
                            if (fromIdx < toIndex) {
                                if (fromIdx < pref.ingredients[jdx].ingrRef  && pref.ingredients[jdx].ingrRef <= toIndex) {
                                    pref.ingredients[jdx].ingrRef--;
                                }
                            } else if (toIndex < fromIdx) {
                                if (toIndex <= pref.ingredients[jdx].ingrRef  && pref.ingredients[jdx].ingrRef < fromIdx) {
                                    pref.ingredients[jdx].ingrRef++;
                                }
                            }
                        }
                    }
                }
            },

            availableIngredients : function (pref) {
                var res = $scope.overall.ingredients.slice();
                var idx, jdx;
                for (idx = 0; idx < pref.ingredients.length; idx++) {
                    jdx = res.indexOf($scope.overall.ingredients[pref.ingredients[idx].ingrRef]);
                    if (jdx !== -1) {
                        res.splice(jdx, 1);
                    }
                }
                return res;
            },

            checkFlours : function (pref) {
                var pFlourSum = 0;
                var idx, flour;

                for (idx = 0; idx < pref.flours.length; idx++) {
                    flour = pref.flours[idx];

                    if (flour.value === undefined) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            subTitle: $scope.t.preferment.toUpperCase() + " - <strong>" + pref.name + "</strong>",
                            template : $scope.t.alert2($scope.overall.flours[flour.flourRef].name),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }

                    pFlourSum += flour.value;
                }

                if (pFlourSum !== 100) {
                    $ionicPopup.alert({
                        title: $scope.t.bad_value.toUpperCase(),
                        subTitle: $scope.t.preferment.toUpperCase() + " - <strong>" + pref.name + "</strong>",
                        template : $scope.t.alert1(pFlourSum),
                        okText: $scope.t.close.toUpperCase()
                    });
                    return -1;
                }

                return 0;
            },

            checkIngredients : function (pref) {
                var idx, ingr;
                for (idx = 0; idx < pref.ingredients.length; idx++) {
                    ingr = pref.ingredients[idx];

                    if (ingr.value === undefined) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            subTitle: $scope.t.preferment.toUpperCase() + " - <strong>" + pref.name + "</strong>",
                            template : $scope.t.alert2($scope.overall.ingredients[ingr.ingrRef].name),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }
                }

                return 0;
            },

            check : function () {
                var prefPercSum = 0;
                var idx, pref;
                for (idx = 0; idx < this.preferments.length; idx++) {
                    pref = this.preferments[idx];

                    if (pref.prefFlourValue === undefined) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            subTitle: $scope.t.preferment.toUpperCase(),
                            template : $scope.t.alert3(pref.name),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }

                    prefPercSum += this.preferments[idx].prefFlourValue;

                    if (this.checkFlours(pref) !== 0 || this.checkIngredients(pref) !== 0) {
                        return -1;
                    }
                }

                if (prefPercSum > 100) {
                    $ionicPopup.alert({
                        title: $scope.t.bad_value.toUpperCase(),
                        subTitle: $scope.t.preferment.toUpperCase(),
                        template : $scope.t.alert4(prefPercSum),
                        okText: $scope.t.close.toUpperCase()
                    });
                    return -1;
                }

                return 0;
            },

            reset : function () {
                this.preferments = [];
            }
        };

        $scope.finalDough = {
            scaleBy : "DOUGH",
            total : undefined,
            overall : [],
            preferments : [],
            dough : [],

            reset : function (internalOnly) {
                if (!internalOnly) {
                    this.scaleBy = "DOUGH";
                    this.total = undefined;
                }
                this.overall = [];
                this.preferments = [];
                this.dough = [];
            },

            calculate : function () {
                this.reset(true);

                //---- OVERALL ----

                if (this.total === undefined) {
                    $ionicPopup.alert({
                        title: $scope.t.bad_value.toUpperCase(),
                        subTitle: $scope.t.final_dough.toUpperCase(),
                        template : $scope.t.fill_total_amount_field,
                        okText: $scope.t.close.toUpperCase()
                    });

                    this.reset(true);
                    return -1;
                }

                if ($scope.overall.check() !== 0) {
                    this.reset(true);
                    return -1;
                }

                var scaleFactor;

                if (this.scaleBy === "DOUGH") {
                    scaleFactor = $scope.overall.scaleFactor();
                } else { // "FLOUR"
                    scaleFactor = 100;
                }

                var scaleDoughFactor = this.total / scaleFactor;

                this.overall = $scope.overall.flours.concat($scope.overall.ingredients);

                var idx, ingr;

                for (idx = 0; idx < this.overall.length; idx++) {
                    ingr = this.overall[idx];

                    ingr.weight = ingr.value * scaleDoughFactor;

                    // -> finalDough ingredient weight, updated later for each preferment
                    this.dough.push(new Ingredient(ingr.name, ingr.value, ingr.weight));
                }

                //---- PREFERMENTS ----

                if ($scope.preferment.check() !== 0) {
                    this.reset(true);
                    return -1;
                }

                var prefOut, prefIn, prefScaleDoughFactor;
                var jdx, weight, dI, f, i;

                for (idx = 0; idx < $scope.preferment.preferments.length; idx++) {
                    prefOut = [];
                    this.preferments.push(prefOut);

                    prefIn = $scope.preferment.preferments[idx];
                    prefOut.name = prefIn.name;
                    prefOut.prefFlourValue = prefIn.prefFlourValue;
                    prefOut.totalWeight = 0;

                    prefScaleDoughFactor = scaleDoughFactor * (prefIn.prefFlourValue / 100);

                    for (jdx = 0; jdx < prefIn.flours.length; jdx++) {

                        f = prefIn.flours[jdx];

                        weight = f.value * prefScaleDoughFactor;

                        prefOut.push(new Ingredient($scope.overall.flours[f.flourRef].name, f.value, weight));

                        // -> finalDough scale down

                        dI = this.dough[this.overall.indexOf($scope.overall.flours[f.flourRef])];

                        if (dI.weight - weight < -0.01) {
                            $ionicPopup.alert({
                                title: $scope.t.bad_value.toUpperCase(),
                                subTitle: $scope.t.final_dough.toUpperCase(),
                                template : $scope.t.alert5($scope.overall.flours[f.flourRef].name, prefIn.name),
                                okText: $scope.t.close.toUpperCase()
                            });

                            this.reset(true);
                            return -1;
                        }

                        dI.weight -= weight;

                        // Preferment total weight
                        prefOut.totalWeight += weight;
                    }

                    for (jdx = 0; jdx < prefIn.ingredients.length; jdx++) {

                        i = prefIn.ingredients[jdx];

                        weight = i.value * prefScaleDoughFactor;

                        prefOut.push(new Ingredient($scope.overall.ingredients[i.ingrRef].name, i.value, weight));

                        // -> finalDough scale down

                        dI = this.dough[this.overall.indexOf($scope.overall.ingredients[i.ingrRef])];

                        if (dI.weight - weight < -0.01) {
                            $ionicPopup.alert({
                                title: $scope.t.bad_value.toUpperCase(),
                                subTitle: $scope.t.final_dough.toUpperCase(),
                                template : $scope.t.alert5($scope.overall.ingredients[i.ingrRef].name, prefIn.name),
                                okText: $scope.t.close.toUpperCase()
                            });

                            this.reset(true);
                            return -1;
                        }

                        dI.weight -= weight;

                        // Preferment total weight
                        prefOut.totalWeight += weight;
                    }

                    // IF SOURDOUGH ...
                    if (prefIn.type === "sourdough") {
                        prefOut.push(new Ingredient("(" + $scope.t.sourdough_seed + ")", prefIn.seed, prefIn.seed * prefScaleDoughFactor));
                    }

                    prefOut.push(new Ingredient("", "", prefOut.totalWeight));
                }

                //---- FINAL DOUGH ----

                for (idx = 0; idx < this.preferments.length; idx++) {
                    this.dough.push(new Ingredient(this.preferments[idx].name, "", this.preferments[idx].totalWeight));
                }

                var totDoughWeight = 0;
                for (idx = 0; idx < this.dough.length; idx++) {
                    totDoughWeight += this.dough[idx].weight;
                }

                this.dough.push(new Ingredient("", "", totDoughWeight));

                //---- weights to string, formatted with 2 decimal

                for (idx = 0; idx < this.overall.length; idx++) {
                    this.overall[idx].weight = parseFloat(this.overall[idx].weight.toFixed(2));
                }

                for (idx = 0; idx < this.preferments.length; idx++) {
                    for (jdx = 0; jdx < this.preferments[idx].length; jdx++) {
                        this.preferments[idx][jdx].weight = parseFloat(this.preferments[idx][jdx].weight.toFixed(2));
                    }
                }

                for (idx = 0; idx < this.dough.length; idx++) {
                    this.dough[idx].weight = parseFloat(this.dough[idx].weight.toFixed(2));
                }

                $ionicScrollDelegate.resize();

                return 0;
            }
        };

        /*---- RESET ALL TABS ----*/

        $scope.reset = function () {
            $scope.overall.reset();
            $scope.preferment.reset();
            $scope.finalDough.reset();

            $scope.recipeBook.currentRecipeName = $scope.t.app_name;
            $scope.recipeBook.currentRecipeEdited = false;
            $scope.recipeBook.loadedRecipe = false;

            $ionicTabsDelegate.select(0);
        };

        /*---- EDIT MODE ----*/

        $scope.editMode = false;
        $scope.__editModeEnabled = true;

        $scope.editModeEnabled = function () {
            if (!$scope.__editModeEnabled) {
                return false;
            }

            switch ($ionicTabsDelegate.selectedIndex()) {
            case 0:  // OVERALL TAB
                return ($scope.overall.flours.length > 0 || $scope.overall.ingredients.length > 0);
            case 1:  // PREFERMENT TAB
                return ($scope.preferment.preferments.length > 0);
            }

            return false;
        };

        $scope.editModeEnable = function (value) {
            $scope.__editModeEnabled = value;
            $scope.editMode = false;
        };

        $scope.editModeToggle = function () {
            $scope.editMode = !$scope.editMode;
        };

        /*---- SIDE MENU  ----*/

        $scope.showSaveAs = function () {

            var popUp = $ionicPopup.show({
                template: '<input type="text" ng-model="recipeBook.newRecipeName"></input>',
                title: $scope.t.enter_recipe_name,
                scope: $scope,
                buttons: [
                    { text: $scope.t.cancel.toUpperCase() },
                    {
                        text: $scope.t.save.toUpperCase(),
                        type: 'button-positive',
                        onTap: function (e) {
                            if (!$scope.recipeBook.newRecipeName) {
                                //don't allow the user to close unless he enters th recipe name
                                e.preventDefault();
                            } else {
                                var saveOK = $scope.recipeBook.saveRecipe(false);
                                $scope.recipeBook.newRecipeName = "";
                                return saveOK;
                            }
                            return undefined;
                        }
                    }
                ]
            });

            popUp.then(function (res) {
                if (res === -1) {
                    $ionicPopup.alert({
                        title: $scope.t.save_error.toUpperCase(),
                        template : $scope.t.element_already_pres_use_dif_name,
                        okText: $scope.t.close.toUpperCase()
                    });
                }
            });
        };
        $scope.showReset = function () {
            var confirmPopup = $ionicPopup.confirm({
                title: $scope.t.reset.toUpperCase(),
                template: $scope.t.sure_reset
            });
            confirmPopup.then(function (res) {
                if (res) {
                    $scope.reset();
                }
            });
        };
        $scope.showAbout = function () {
            $ionicPopup.alert({
                title: $scope.t.app_name,
                template: "<a href='mailto:panificazionefavaglie@gmail.com?subject=BakerCalc'>panificazionefavaglie@gmail.com</a>",
                okText: $scope.t.close.toUpperCase()
            });
        };

        $scope.showDonate = function () {
            $ionicPopup.alert({
                title: $scope.t.support_the_app,
                template: "<p style='text-align: center;'>If you like the App<br/>support me with a beer!<br/>Thank you</p><form style='text-align: center;' action='https://www.paypal.com/cgi-bin/webscr' method='post' target='_top'><input type='hidden' name='cmd' value='_s-xclick'><input type='hidden' name='hosted_button_id' value='YWVFRGAC55UX4'><input style='width: auto;' type='image' src='icons/donate.gif' border='0' name='submit' alt='PayPal – The safer, easier way to pay online!'><img alt=' border='0' src='https://www.paypalobjects.com/it_IT/i/scr/pixel.gif' width='1' height='1'></form>",
                okText: $scope.t.close.toUpperCase()
            });
        };

        /*---- FAVORITES DOUGH ----*/

        $ionicModal.fromTemplateUrl('favorite-dough.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalFD = modal;
        });
        $scope.showFavoriteDough = function () {
            $scope.editMode = false;
            $scope.modalFD.show();
        };
        $scope.closeFavoriteDough = function () {
            $scope.editMode = false;
            $scope.modalFD.hide();
        };

        /*---- IMPORT ----*/

        $ionicModal.fromTemplateUrl('import.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalIRB = modal;
        });
        $scope.showImport = function () {
            $scope.editMode = false;
            $scope.modalIRB.show();
        };
        $scope.closeImport = function () {
            $scope.editMode = false;
            $scope.modalIRB.hide();
        };

        $scope.openFileDialog = function () {
            var input = document.getElementById('fileInput');
            input.value = "";    // reset value, otherwise event not triggered on
            input.addEventListener('change', $scope._import, false);
            document.getElementById('fileInput').click();
        };

        /*---- RECIPE BOOK ----*/

        $ionicModal.fromTemplateUrl('recipe-book.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalRB = modal;
        });
        $scope.showRecipeBook = function () {
            $scope.editMode = false;
            $scope.modalRB.show();
        };
        $scope.closeRecipeBook = function () {
            $ionicListDelegate.closeOptionButtons();
            $scope.editMode = false;
            $scope.modalRB.hide();
        };

        /*---- SOURDOUGH BUILDER ----*/

        $ionicModal.fromTemplateUrl('sourdough-builder.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalSB = modal;
        });
        $scope.showSourdoughBuilder = function (item) {
            $scope.editMode = false;
            $scope.sourdoughBuilder.init(item);
            $scope.modalSB.show();
        };
        $scope.closeSourdoughBuilder = function () {
            $ionicListDelegate.closeOptionButtons();
            $scope.editMode = false;
            $scope.modalSB.hide();
        };

        /*---- SOURDOUGH BUILDER BOOK ----*/

        $ionicModal.fromTemplateUrl('sourdough-builder-book.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalSBB = modal;
        });
        $scope.showSourdoughBuilderBook = function () {
            $scope.editMode = false;
            $scope.sourdoughBuilder.init();
            $scope.modalSBB.show();
        };
        $scope.closeSourdoughBuilderBook = function () {
            $ionicListDelegate.closeOptionButtons();
            $scope.editMode = false;
            $scope.modalSBB.hide();
        };

        /*---- DESIRED DOUGH TEMPERATURE ----*/

        $ionicModal.fromTemplateUrl('desired-dough-temperature.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function (modal) {
            $scope.modalDDT = modal;
        });
        $scope.showDDT = function () {
            $scope.editMode = false;
            $scope.modalDDT.show();
        };
        $scope.closeDDT = function () {
            $ionicListDelegate.closeOptionButtons();
            $scope.editMode = false;
            $scope.modalDDT.hide();
        };

        /*---- Cleanup the modal when we're done with it! ----*/

        $scope.$on('$destroy', function () {
            $scope.modalRB.remove();
            $scope.modalIRB.remove();
            $scope.modalFD.remove();
            $scope.modalSB.remove();
            $scope.modalSBB.remove();
        });

        /*---- RECIPE BOOK DATA / METHOD ----*/

        $scope.recipeBook = {
            recipes : [],
            favoriteDough : {},
            loadedRecipe : false,
            currentRecipeName : "",
            currentRecipeEdited : false,

            init : function () {
                this.currentRecipeName = $scope.t.app_name;

                var data = $scope.ms.getItem("__recipesIndex__");
                if (data !== null) {
                    this.recipes = JSON.parse(data);
                }

                data = $scope.ms.getItem("__favoriteDough__");
                if (data !== null) {
                    this.favoriteDough = JSON.parse(data);
                }
            },

            editModeEnabled : function () {
                return (this.recipes.length > 0);
            },

            editModeEnabled_favoriteDough : function () {
                return (Object.keys(this.favoriteDough).length > 0);
            },

            notifyEdit : function () {
                if (this.loadedRecipe) {
                    this.currentRecipeEdited = true;
                }
            },

            newRecipeName : "",
            saveRecipe : function (overwrite) {
                if (!overwrite) {
                    if (this.recipes.indexOf(this.newRecipeName) !== -1) {
                        return -1;
                    }

                    this.currentRecipeName = this.newRecipeName;
                    this.recipes.push(this.newRecipeName);

                    $scope.ms.setItem("__recipesIndex__", angular.toJson(this.recipes));
                    $scope.ms.setItem(this.newRecipeName, angular.toJson([$scope.overall.flours, $scope.overall.ingredients, $scope.preferment.preferments]));
                } else {
                    $scope.ms.setItem(this.currentRecipeName, angular.toJson([$scope.overall.flours, $scope.overall.ingredients, $scope.preferment.preferments]));
                }

                this.loadedRecipe = true;
                this.currentRecipeEdited = false;

                return 0;
            },

            loadRecipe : function (recipe) {
                $scope.reset();

                var data = JSON.parse($scope.ms.getItem(recipe));

                $scope.overall.flours = data[0];
                $scope.overall.ingredients = data[1];
                $scope.preferment.preferments = data[2];

                this.currentRecipeName = recipe;
                this.currentRecipeEdited = false;
                this.loadedRecipe = true;

                $scope.closeRecipeBook();
            },

            delRecipe : function (item) {
                var idx = this.recipes.indexOf(item);
                if (idx !== -1) {
                    this.recipes.splice(idx, 1);
                    delete this.favoriteDough[item];

                    $scope.ms.setItem("__recipesIndex__", angular.toJson(this.recipes));
                    $scope.ms.setItem("__favoriteDough__", angular.toJson(this.favoriteDough));
                    $scope.ms.removeItem(item);

                    if (this.currentRecipeName === item) {
                        $scope.reset();
                    }
                }
            },

            moveRecipe : function (item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    this.recipes.splice(fromIndex, 1);
                    this.recipes.splice(toIndex, 0, item);
                    $scope.ms.setItem("__recipesIndex__", angular.toJson(this.recipes));
                }
            },

            renameRecipe : function (item) {
                $ionicListDelegate.closeOptionButtons();
                var popUp = $ionicPopup.show({
                    template: '<input type="text" ng-model="recipeBook.newRecipeName"></input>',
                    title: $scope.t.rename_as.toUpperCase(),
                    scope: $scope,
                    buttons: [
                        { text: $scope.t.cancel.toUpperCase() },
                        {
                            text: $scope.t.save.toUpperCase(),
                            type: 'button-positive',
                            onTap: function (e) {
                                if (!$scope.recipeBook.newRecipeName) {
                                    //don't allow the user to close unless he enters th recipe name
                                    e.preventDefault();
                                } else {
                                    return 0;
                                }
                                return undefined;
                            }
                        }
                    ]
                });

                popUp.then(function (res) {

                    if (res === 0) {  // got new name
                        var idx = $scope.recipeBook.recipes.indexOf($scope.recipeBook.newRecipeName);

                        if (idx !== -1) {
                            $ionicPopup.alert({
                                title: $scope.t.save_error.toUpperCase(),
                                template : $scope.t.element_already_pres_use_dif_name,
                                okText: $scope.t.close.toUpperCase()
                            });
                        } else {  // rename
                            $scope.recipeBook.recipes[$scope.recipeBook.recipes.indexOf(item)] = $scope.recipeBook.newRecipeName;
                            if ($scope.recipeBook.favoriteDough.hasOwnProperty(item)) {
                                $scope.recipeBook.favoriteDough[$scope.recipeBook.newRecipeName] = $scope.recipeBook.favoriteDough[item];
                                delete $scope.recipeBook.favoriteDough[item];
                            }

                            $scope.ms.setItem("__recipesIndex__", angular.toJson($scope.recipeBook.recipes));
                            $scope.ms.setItem("__favoriteDough__", angular.toJson($scope.recipeBook.favoriteDough));

                            $scope.ms.setItem($scope.recipeBook.newRecipeName, $scope.ms.getItem(item));
                            $scope.ms.removeItem(item);

                            if ($scope.recipeBook.currentRecipeName === item) {
                                $scope.recipeBook.currentRecipeName = $scope.recipeBook.newRecipeName;
                            }
                        }
                    }

                    $scope.recipeBook.newRecipeName = "";
                });
            },

            loadFavoriteDough : function (recipe, fd) {
                this.loadRecipe(recipe);

                $scope.finalDough.scaleBy = fd.scaleBy;
                $scope.finalDough.total = fd.total;

                $ionicTabsDelegate.select(2);
                $scope.closeFavoriteDough();
            },

            delFavoriteDough : function (recipe, index) {
                this.favoriteDough[recipe].splice(index, 1);
                if (this.favoriteDough[recipe].length === 0) {
                    delete this.favoriteDough[recipe];
                }
                $scope.ms.setItem("__favoriteDough__", angular.toJson(this.favoriteDough));
            },

            addFavoriteDough : function () {
                if (!this.favoriteDough.hasOwnProperty(this.currentRecipeName)) {
                    this.favoriteDough[this.currentRecipeName] = [];
                }

                this.favoriteDough[this.currentRecipeName].push({scaleBy : $scope.finalDough.scaleBy, total : $scope.finalDough.total});

                $scope.ms.setItem("__favoriteDough__", angular.toJson(this.favoriteDough));
            }
        };

        $scope._export = function () {
            var list = [];
            var idx;
            for (idx = 0; idx < $scope.ms.length; idx++) {
                list.push({key : $scope.ms.key(idx), value: $scope.ms.getItem($scope.ms.key(idx))});
            }

            saveFile("baker%Calc-backup.txt", angular.toJson(list));
        };

        $scope._import = function (event) {
            var input = event.target;

            if (input.files.length === 0) {
                return;
            }

            var reader = new FileReader();

            reader.onload = function () {
                try {
                    var list = JSON.parse(reader.result);

                    $ionicPopup.confirm({
                        title: $scope.t.import_confirm.toUpperCase(),
                        template: $scope.t.sure_overwrite
                    }).then(function (res) {
                        if (res) {
                            $scope.ms.clear();

                            list.forEach(function (item) {
                                $scope.ms.setItem(item.key, item.value);
                            });
                            $scope.recipeBook.init();
                            $scope.sourdoughBuilder.init();
                            $scope.reset();

                            $scope.closeImport();
                            // $scope.showRecipeBook();

                            $ionicPopup.alert({
                                title: $scope.t.imported.toUpperCase(),
                                template : $scope.t.imported_summary(
                                    $scope.recipeBook.recipes.length,
                                    Object.keys($scope.recipeBook.favoriteDough).length,
                                    $scope.sourdoughBuilder.book.length
                                ),
                                okText: $scope.t.close.toUpperCase()
                            });
                        }
                    });
                } catch (e) {
                    alert("Invalid format!");
                    return;
                }
            };

            reader.readAsText(input.files[0]);
        };

        $scope.sourdoughBuilder = {
            book : [],
            builds : [],
            currentBuildName : "",
            edited : false,
            saved : false,
            total : undefined,
            buildsWeight : [],

            init : function (item) {
                this.edited = false;
                this.total = undefined;
                this.buildsWeight = [];

                if (item) {
                    this.builds = item.builds;
                    this.currentBuildName = item.name;
                    this.saved = true;
                } else {
                    this.builds = [];
                    this.currentBuildName = $scope.t.sourdough_builder;
                    this.saved = false;
                }

                var data = $scope.ms.getItem("__sourdoughBuilder__");
                if (data !== null) {
                    this.book = JSON.parse(data);
                } else {
                    this.book = [];
                }
            },

            addBuildName : "",
            addBuild : function () {
                this.builds.push(new SourdoughBuild(this.addBuildName, 100, null, null));
                this.addBuildName = "";

                this.notifyEdit();
            },

            notifyEdit : function () {
                if (this.saved) {
                    this.edited = true;
                }
            },

            editModeEnabled : function () {
                if (!$scope.__editModeEnabled) {
                    return false;
                }

                return (this.builds.length > 0);
            },

            deleteBuild : function (idx) {
                this.builds.splice(idx, 1);
                this.notifyEdit();
            },

            saveName : "",
            saveAs : function () {
                var popUp = $ionicPopup.show({
                    template: '<input type="text" ng-model="sourdoughBuilder.saveName"></input>',
                    title: $scope.t.save.toUpperCase(),
                    scope: $scope,
                    buttons: [
                        { text: $scope.t.cancel.toUpperCase() },
                        {
                            text: $scope.t.save.toUpperCase(),
                            type: 'button-positive',
                            onTap: function (e) {
                                if (!$scope.sourdoughBuilder.saveName) {
                                    //don't allow the user to close unless he enters th recipe name
                                    e.preventDefault();
                                } else {
                                    return 0;
                                }
                                return undefined;
                            }
                        }
                    ]
                });

                popUp.then(function (res) {
                    if (res === 0) {  // got new name
                        var idx;
                        for (idx = 0; idx < $scope.sourdoughBuilder.book.length; idx++) {
                            if ($scope.sourdoughBuilder.book[idx].name === $scope.sourdoughBuilder.saveName) {
                                $ionicPopup.alert({
                                    title: $scope.t.save_error.toUpperCase(),
                                    template : $scope.t.element_already_pres_use_dif_name,
                                    okText: $scope.t.close.toUpperCase()
                                });
                                $scope.sourdoughBuilder.saveName = "";
                                return;
                            }
                        }

                        $scope.sourdoughBuilder.book.push({name : $scope.sourdoughBuilder.saveName, builds : $scope.sourdoughBuilder.builds});
                        $scope.sourdoughBuilder.currentBuildName = $scope.sourdoughBuilder.saveName;

                        $scope.ms.setItem("__sourdoughBuilder__", angular.toJson($scope.sourdoughBuilder.book));
                        $scope.sourdoughBuilder.saved = true;
                        $scope.sourdoughBuilder.edited = false;
                    }

                    $scope.sourdoughBuilder.saveName = "";
                });
            },

            save : function () {
                var idx;
                for (idx = 0; idx < this.book.length; idx++) {
                    if (this.book[idx].name === this.currentBuildName) {
                        this.book[idx].builds = this.builds;

                        $scope.ms.setItem("__sourdoughBuilder__", angular.toJson(this.book));

                        this.saved = true;
                        this.edited = false;

                        break;
                    }
                }
            },

            calculate : function () {
                /* check field */

                if (this.total === undefined) {
                    $ionicPopup.alert({
                        title: $scope.t.bad_value.toUpperCase(),
                        subTitle: $scope.t.final_dough.toUpperCase(),
                        template : $scope.t.fill_total_amount_field,
                        okText: $scope.t.close.toUpperCase()
                    });

                    return -1;
                }

                var idx, b;

                for (idx = 0; idx < this.builds.length; idx++) {
                    b = this.builds[idx];

                    if (b.water === null || (0 > b.water)) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            template : $scope.t.alert2($scope.t.water),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }

                    if (b.starter === null || (0 > b.starter)) {
                        $ionicPopup.alert({
                            title: $scope.t.bad_value.toUpperCase(),
                            template : $scope.t.alert2($scope.t.sourdough_seed),
                            okText: $scope.t.close.toUpperCase()
                        });
                        return -1;
                    }
                }

                /* calculate */
                this.buildsWeight = [];

                var total = this.total;
                var scaleFactor, bW;

                for (idx = this.builds.length - 1; idx >= 0; idx--) {
                    b = this.builds[idx];

                    scaleFactor = total / (b.flour + b.water + b.starter);

                    bW = new SourdoughBuild(b.name,
                            parseFloat((b.flour * scaleFactor).toFixed(2)),
                            parseFloat((b.water * scaleFactor).toFixed(2)),
                            parseFloat((b.starter * scaleFactor).toFixed(2)));
                    bW.total = parseFloat((bW.flour + bW.water + bW.starter).toFixed(2));

                    this.buildsWeight.unshift(bW);

                    total = b.starter * scaleFactor;
                }
            },

            // --- BOOK

            editModeEnabled_book : function () {
                return (this.book.length > 0);
            },

            delBook : function (idx) {
                this.book.splice(idx, 1);
                $scope.ms.setItem("__sourdoughBuilder__", angular.toJson(this.book));
            },

            loadBook : function (item) {
                $scope.closeSourdoughBuilderBook();
                $scope.showSourdoughBuilder(item);
            },

            moveBook : function (item, fromIndex, toIndex) {
                if (fromIndex !== -1 && toIndex !== -1) {
                    this.book.splice(fromIndex, 1);
                    this.book.splice(toIndex, 0, item);
                    $scope.ms.setItem("__sourdoughBuilder__", angular.toJson(this.book));
                }
            },

            renameBook : function (idx) {
                $ionicListDelegate.closeOptionButtons();
                var popUp = $ionicPopup.show({
                    template: '<input type="text" ng-model="sourdoughBuilder.saveName"></input>',
                    title: $scope.t.rename_as.toUpperCase(),
                    scope: $scope,
                    buttons: [
                        { text: $scope.t.cancel.toUpperCase() },
                        {
                            text: $scope.t.save.toUpperCase(),
                            type: 'button-positive',
                            onTap: function (e) {
                                if (!$scope.sourdoughBuilder.saveName) {
                                    //don't allow the user to close unless he enters th recipe name
                                    e.preventDefault();
                                } else {
                                    return 0;
                                }
                                return undefined;
                            }
                        }
                    ]
                });

                popUp.then(function (res) {
                    if (res === 0) {  // got new name

                        $scope.sourdoughBuilder.book[idx].name = $scope.sourdoughBuilder.saveName;
                        $scope.ms.setItem("__sourdoughBuilder__", angular.toJson($scope.sourdoughBuilder.book));
                    }

                    $scope.sourdoughBuilder.saveName = "";
                });
            }
        };

        $scope.ddt = {
            numberOfPreferments : 0,
            preferment : [undefined, undefined, undefined, undefined],
            desired : undefined,
            flour : undefined,
            room : undefined,
            friction : undefined,
            water : undefined,

            calculate : function () {
                var idx;
                var prefSum = 0;

                if (this.desired === undefined || this.flour === undefined || this.room === undefined || this.friction === undefined) {
                    return;
                }

                for (idx = 0; idx < parseInt(this.numberOfPreferments, 10); idx++) {
                    if (this.preferment[idx] === undefined) {
                        return;
                    }
                    prefSum += this.preferment[idx];
                }

                this.water = (this.desired * (3 + parseInt(this.numberOfPreferments, 10))) - this.flour - this.room - this.friction - prefSum;
            }
        };
    });

}());
